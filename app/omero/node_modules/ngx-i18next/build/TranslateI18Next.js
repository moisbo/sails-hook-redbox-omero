"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var index_1 = require("ts-smart-logger/index");
var LanguageDetectorAdapter_1 = require("./browser/LanguageDetectorAdapter");
var TranslateI18NextLanguageDetector_1 = require("./TranslateI18NextLanguageDetector");
var i18next = require('i18next/index'), i18nextXHRBackend = require('i18next-xhr-backend/index');
var TranslateI18Next = (function () {
    function TranslateI18Next(translateI18NextLanguagesSupport) {
        this.translateI18NextLanguagesSupport = translateI18NextLanguagesSupport;
        this.mapping = {};
    }
    TranslateI18Next.prototype.init = function (options) {
        var _this = this;
        options = options || {};
        var fallbackLng = options.fallbackLng || 'en';
        var browserLanguageDetectorCtor = options.browserLanguageDetector
            ? LanguageDetectorAdapter_1.LanguageDetectorAdapter.toBrowserLanguageDetector(options.browserLanguageDetector)
            : LanguageDetectorAdapter_1.LanguageDetectorAdapter.toBrowserLanguageDetector({
                detect: function () { return _this.translateI18NextLanguagesSupport.getSupportedLanguage(options.supportedLanguages); }
            });
        TranslateI18Next.logger.debug(function (logger) {
            logger.write('[$TranslateI18Next] The fallback language is', fallbackLng, '. The current language has been detected as', new browserLanguageDetectorCtor().detect(), '. The default language detector is looking at <@Inject(LOCALE_ID) locale: OpaqueToken> where <import {LOCALE_ID} from "@angular/core">', '. You should provide your current locale for all services using <@NgModule({providers: [{provide: LOCALE_ID, useValue: "en-AU"}]})>', '. See also "supportedLanguages" optional parameter when <TranslateI18Next.init(...)> is called');
        });
        this.mapping = options.mapping || this.mapping;
        // default plugins
        var defaultUse = options.defaultUse || [i18nextXHRBackend, browserLanguageDetectorCtor];
        var pluginsUsed = defaultUse.concat(options.use || []);
        return this.i18nextPromise =
            new Promise(function (resolve, reject) {
                // use each plugin
                pluginsUsed.forEach(function (plugin) {
                    i18next.use(plugin);
                });
                i18next
                    .init(Object.assign({}, options, {
                    fallbackLng: fallbackLng,
                    /**
                     * The keys may contain normal human phrases, i.e. the "gettext format" therefore we should disable "i18next format"
                     */
                    nsSeparator: false,
                    keySeparator: false
                }), function (err) {
                    if (err) {
                        TranslateI18Next.logger.error(err);
                        reject(err);
                    }
                    else {
                        TranslateI18Next.logger.debug('[$TranslateI18Next] The translations has been loaded for the current language', i18next.language);
                        resolve(null);
                    }
                });
            });
    };
    TranslateI18Next.prototype.translate = function (key, options) {
        if (key) {
            key = this.mapping[key] || key;
        }
        options = options || {};
        options.interpolation = options.interpolation || {};
        // Angular2 interpolation template should not interfere with i18next interpolation template
        options.interpolation.prefix = "{";
        options.interpolation.suffix = "}";
        return i18next.t(key, options);
    };
    TranslateI18Next.prototype.changeLanguage = function (lng, callback) {
        i18next.changeLanguage(lng, callback);
    };
    return TranslateI18Next;
}());
TranslateI18Next.logger = index_1.LoggerFactory.makeLogger(TranslateI18NextLanguageDetector_1.TranslateI18NextLanguagesSupport);
TranslateI18Next.decorators = [
    { type: core_1.Injectable },
];
/** @nocollapse */
TranslateI18Next.ctorParameters = function () { return [
    { type: TranslateI18NextLanguageDetector_1.TranslateI18NextLanguagesSupport, decorators: [{ type: core_1.Inject, args: [TranslateI18NextLanguageDetector_1.TranslateI18NextLanguagesSupport,] },] },
]; };
exports.TranslateI18Next = TranslateI18Next;
//# sourceMappingURL=TranslateI18Next.js.map