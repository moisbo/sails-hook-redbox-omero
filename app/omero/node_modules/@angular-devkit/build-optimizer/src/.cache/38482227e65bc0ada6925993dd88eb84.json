{"remainingRequest":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/@asymmetrik/ngx-leaflet-draw/dist/leaflet-draw/core/leaflet-draw.directive.js","dependencies":[{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/@asymmetrik/ngx-leaflet-draw/dist/leaflet-draw/core/leaflet-draw.directive.js","mtime":1516809665000},{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/cache-loader/dist/cjs.js","mtime":1528352013145},{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Directive, Input } from '@angular/core';\nimport * as L from 'leaflet';\nimport 'leaflet-draw';\nimport { LeafletDirective, LeafletDirectiveWrapper } from '@asymmetrik/ngx-leaflet';\nvar LeafletDrawDirective = /*@__PURE__*/ (function () {\n    function LeafletDrawDirective(leafletDirective) {\n        this.drawOptions = null;\n        this.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\n    }\n    LeafletDrawDirective.prototype.ngOnInit = function () {\n        var _this = this;\n        this.leafletDirective.init();\n        // Initialize the draw options (in case they weren't provided)\n        this.drawOptions = this.initializeDrawOptions(this.drawOptions);\n        // Create the control\n        this.drawControl = new L.Control.Draw(this.drawOptions);\n        // Pull out the feature group for convenience\n        this.featureGroup = this.drawOptions.edit.featureGroup;\n        // Add the control to the map\n        this.leafletDirective.getMap().addControl(this.drawControl);\n        // Register the main handler for events coming from the draw plugin\n        this.leafletDirective.getMap().on(L.Draw.Event.CREATED, function (e) {\n            var layer = e.layer;\n            _this.featureGroup.addLayer(layer);\n        });\n    };\n    LeafletDrawDirective.prototype.ngOnDestroy = function () {\n        this.leafletDirective.getMap().removeControl(this.drawControl);\n    };\n    LeafletDrawDirective.prototype.ngOnChanges = function (changes) {\n        // No changes being handled currently\n    };\n    LeafletDrawDirective.prototype.initializeDrawOptions = function (options) {\n        // Ensure the options have a featureGroup\n        if (null == options) {\n            options = {\n                edit: null\n            };\n        }\n        if (null == options.edit) {\n            options.edit = {\n                featureGroup: null\n            };\n        }\n        if (null == options.edit.featureGroup) {\n            // No feature group was provided, so we're going to add it ourselves\n            options.edit.featureGroup = L.featureGroup();\n            this.leafletDirective.getMap().addLayer(options.edit.featureGroup);\n        }\n        return options;\n    };\n    return LeafletDrawDirective;\n}());\nexport { LeafletDrawDirective };\n//# sourceMappingURL=leaflet-draw.directive.js.map \n",null]}