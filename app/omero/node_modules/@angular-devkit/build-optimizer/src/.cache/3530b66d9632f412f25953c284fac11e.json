{"remainingRequest":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/ngx-i18next/build/TranslateI18Next.js","dependencies":[{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/ngx-i18next/build/TranslateI18Next.js","mtime":1493317104000},{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/cache-loader/dist/cjs.js","mtime":1528352013145},{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar index_1 = require(\"ts-smart-logger/index\");\nvar LanguageDetectorAdapter_1 = require(\"./browser/LanguageDetectorAdapter\");\nvar TranslateI18NextLanguageDetector_1 = require(\"./TranslateI18NextLanguageDetector\");\nvar i18next = require('i18next/index'), i18nextXHRBackend = require('i18next-xhr-backend/index');\nvar TranslateI18Next = /*@__PURE__*/ (function () {\n    function TranslateI18Next(translateI18NextLanguagesSupport) {\n        this.translateI18NextLanguagesSupport = translateI18NextLanguagesSupport;\n        this.mapping = {};\n    }\n    TranslateI18Next.prototype.init = function (options) {\n        var _this = this;\n        options = options || {};\n        var fallbackLng = options.fallbackLng || 'en';\n        var browserLanguageDetectorCtor = options.browserLanguageDetector\n            ? LanguageDetectorAdapter_1.LanguageDetectorAdapter.toBrowserLanguageDetector(options.browserLanguageDetector)\n            : LanguageDetectorAdapter_1.LanguageDetectorAdapter.toBrowserLanguageDetector({\n                detect: function () { return _this.translateI18NextLanguagesSupport.getSupportedLanguage(options.supportedLanguages); }\n            });\n        TranslateI18Next.logger.debug(function (logger) {\n            logger.write('[$TranslateI18Next] The fallback language is', fallbackLng, '. The current language has been detected as', new browserLanguageDetectorCtor().detect(), '. The default language detector is looking at <@Inject(LOCALE_ID) locale: OpaqueToken> where <import {LOCALE_ID} from \"@angular/core\">', '. You should provide your current locale for all services using <@NgModule({providers: [{provide: LOCALE_ID, useValue: \"en-AU\"}]})>', '. See also \"supportedLanguages\" optional parameter when <TranslateI18Next.init(...)> is called');\n        });\n        this.mapping = options.mapping || this.mapping;\n        // default plugins\n        var defaultUse = options.defaultUse || [i18nextXHRBackend, browserLanguageDetectorCtor];\n        var pluginsUsed = defaultUse.concat(options.use || []);\n        return this.i18nextPromise =\n            new Promise(function (resolve, reject) {\n                // use each plugin\n                pluginsUsed.forEach(function (plugin) {\n                    i18next.use(plugin);\n                });\n                i18next\n                    .init(Object.assign({}, options, {\n                    fallbackLng: fallbackLng,\n                    /**\n                     * The keys may contain normal human phrases, i.e. the \"gettext format\" therefore we should disable \"i18next format\"\n                     */\n                    nsSeparator: false,\n                    keySeparator: false\n                }), function (err) {\n                    if (err) {\n                        TranslateI18Next.logger.error(err);\n                        reject(err);\n                    }\n                    else {\n                        TranslateI18Next.logger.debug('[$TranslateI18Next] The translations has been loaded for the current language', i18next.language);\n                        resolve(null);\n                    }\n                });\n            });\n    };\n    TranslateI18Next.prototype.translate = function (key, options) {\n        if (key) {\n            key = this.mapping[key] || key;\n        }\n        options = options || {};\n        options.interpolation = options.interpolation || {};\n        // Angular2 interpolation template should not interfere with i18next interpolation template\n        options.interpolation.prefix = \"{\";\n        options.interpolation.suffix = \"}\";\n        return i18next.t(key, options);\n    };\n    TranslateI18Next.prototype.changeLanguage = function (lng, callback) {\n        i18next.changeLanguage(lng, callback);\n    };\n    TranslateI18Next.logger = index_1.LoggerFactory.makeLogger(TranslateI18NextLanguageDetector_1.TranslateI18NextLanguagesSupport);\n    TranslateI18Next.decorators = [\n        { type: core_1.Injectable },\n    ];\n    return TranslateI18Next;\n}());\nexports.TranslateI18Next = TranslateI18Next;\n",null]}