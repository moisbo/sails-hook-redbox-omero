{"remainingRequest":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/uppy/lib/plugins/Dropbox/index.js","dependencies":[{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/uppy/lib/plugins/Dropbox/index.js","mtime":1521677672000},{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/cache-loader/dist/cjs.js","mtime":1528352013145},{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Plugin = require('../../core/Plugin');\nvar Provider = require('../Provider');\nvar View = require('../Provider/view');\nvar icons = require('./icons');\n\nvar _require = require('preact'),\n    h = _require.h;\n\nmodule.exports = function (_Plugin) {\n  _inherits(Dropbox, _Plugin);\n\n  function Dropbox(uppy, opts) {\n    _classCallCheck(this, Dropbox);\n\n    var _this = _possibleConstructorReturn(this, _Plugin.call(this, uppy, opts));\n\n    _this.type = 'acquirer';\n    _this.id = _this.opts.id || 'Dropbox';\n    _this.title = 'Dropbox';\n    _this.icon = function () {\n      return h(\n        'svg',\n        { 'class': 'UppyIcon', width: '128', height: '118', viewBox: '0 0 128 118' },\n        h('path', { d: 'M38.145.777L1.108 24.96l25.608 20.507 37.344-23.06z' }),\n        h('path', { d: 'M1.108 65.975l37.037 24.183L64.06 68.525l-37.343-23.06zM64.06 68.525l25.917 21.633 37.036-24.183-25.61-20.51z' }),\n        h('path', { d: 'M127.014 24.96L89.977.776 64.06 22.407l37.345 23.06zM64.136 73.18l-25.99 21.567-11.122-7.262v8.142l37.112 22.256 37.114-22.256v-8.142l-11.12 7.262z' })\n      );\n    };\n\n    // writing out the key explicitly for readability the key used to store\n    // the provider instance must be equal to this.id.\n    _this[_this.id] = new Provider(uppy, {\n      host: _this.opts.host,\n      provider: 'dropbox'\n    });\n\n    _this.files = [];\n\n    _this.onAuth = _this.onAuth.bind(_this);\n    _this.render = _this.render.bind(_this);\n\n    // set default options\n    var defaultOptions = {};\n\n    // merge default options with the ones set by user\n    _this.opts = _extends({}, defaultOptions, opts);\n    return _this;\n  }\n\n  Dropbox.prototype.install = function install() {\n    this.view = new View(this);\n    // Set default state for Dropbox\n    this.setPluginState({\n      authenticated: false,\n      files: [],\n      folders: [],\n      directories: [],\n      activeRow: -1,\n      filterInput: '',\n      isSearchVisible: false\n    });\n\n    var target = this.opts.target;\n    if (target) {\n      this.mount(target, this);\n    }\n  };\n\n  Dropbox.prototype.uninstall = function uninstall() {\n    this.view.tearDown();\n    this.unmount();\n  };\n\n  Dropbox.prototype.onAuth = function onAuth(authenticated) {\n    this.setPluginState({ authenticated: authenticated });\n    if (authenticated) {\n      this.view.getFolder();\n    }\n  };\n\n  Dropbox.prototype.isFolder = function isFolder(item) {\n    return item['.tag'] === 'folder';\n  };\n\n  Dropbox.prototype.getItemData = function getItemData(item) {\n    return item;\n  };\n\n  Dropbox.prototype.getItemIcon = function getItemIcon(item) {\n    return icons[item['.tag']]();\n  };\n\n  Dropbox.prototype.getItemSubList = function getItemSubList(item) {\n    return item.entries;\n  };\n\n  Dropbox.prototype.getItemName = function getItemName(item) {\n    return item.name || '';\n  };\n\n  Dropbox.prototype.getMimeType = function getMimeType(item) {\n    // mime types aren't supported.\n    return null;\n  };\n\n  Dropbox.prototype.getItemId = function getItemId(item) {\n    return item.id;\n  };\n\n  Dropbox.prototype.getItemRequestPath = function getItemRequestPath(item) {\n    return encodeURIComponent(item.path_lower);\n  };\n\n  Dropbox.prototype.getItemModifiedDate = function getItemModifiedDate(item) {\n    return item.server_modified;\n  };\n\n  Dropbox.prototype.getItemThumbnailUrl = function getItemThumbnailUrl(item) {\n    return this.opts.host + '/' + this.Dropbox.id + '/thumbnail/' + this.getItemRequestPath(item);\n  };\n\n  Dropbox.prototype.render = function render(state) {\n    return this.view.render(state);\n  };\n\n  return Dropbox;\n}(Plugin);\n//# sourceMappingURL=index.js.map",null]}