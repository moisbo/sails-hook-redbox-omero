{"remainingRequest":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/uppy/lib/plugins/Transloadit/Socket.js","dependencies":[{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/uppy/lib/plugins/Transloadit/Socket.js","mtime":1521677675000},{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/cache-loader/dist/cjs.js","mtime":1528352013145},{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar io = require('socket.io-client');\nvar Emitter = require('namespace-emitter');\nvar parseUrl = require('url-parse');\n\n/**\n * WebSocket status API client for Transloadit.\n */\nmodule.exports = function () {\n  function TransloaditSocket(url, assembly) {\n    _classCallCheck(this, TransloaditSocket);\n\n    var emitter = Emitter();\n    this.on = emitter.on.bind(emitter);\n    this.off = emitter.off.bind(emitter);\n    this.emit = emitter.emit.bind(emitter);\n\n    var parsed = parseUrl(url);\n\n    this.assembly = assembly;\n    this.socket = io.connect(parsed.origin, {\n      path: parsed.pathname\n    });\n\n    this.attachDefaultHandlers();\n  }\n\n  TransloaditSocket.prototype.attachDefaultHandlers = function attachDefaultHandlers() {\n    var _this = this;\n\n    this.socket.on('connect', function () {\n      _this.socket.emit('assembly_connect', {\n        id: _this.assembly.assembly_id\n      });\n\n      _this.emit('connect');\n    });\n\n    this.socket.on('assembly_finished', function () {\n      _this.emit('finished');\n\n      _this.close();\n    });\n\n    this.socket.on('assembly_upload_finished', function (file) {\n      _this.emit('upload', file);\n    });\n\n    this.socket.on('assembly_uploading_finished', function () {\n      _this.emit('executing');\n    });\n\n    this.socket.on('assembly_upload_meta_data_extracted', function () {\n      _this.emit('metadata');\n    });\n\n    this.socket.on('assembly_result_finished', function (stepName, result) {\n      _this.emit('result', stepName, result);\n    });\n\n    this.socket.on('assembly_error', function (err) {\n      _this.emit('error', _extends(new Error(err.message), err));\n    });\n  };\n\n  TransloaditSocket.prototype.close = function close() {\n    this.socket.disconnect();\n  };\n\n  return TransloaditSocket;\n}();\n//# sourceMappingURL=Socket.js.map",null]}