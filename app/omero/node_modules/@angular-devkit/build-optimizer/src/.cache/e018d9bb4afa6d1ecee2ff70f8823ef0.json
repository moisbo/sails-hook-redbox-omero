{"remainingRequest":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/uppy/lib/plugins/AwsS3/index.js","dependencies":[{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/uppy/lib/plugins/AwsS3/index.js","mtime":1521677671000},{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/cache-loader/dist/cjs.js","mtime":1528352013145},{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _Promise = typeof Promise === 'undefined' ? require('es6-promise').Promise : Promise;\n\nvar Plugin = require('../../core/Plugin');\nvar Translator = require('../../core/Translator');\n\nvar _require = require('../../core/Utils'),\n    limitPromises = _require.limitPromises;\n\nvar XHRUpload = require('../XHRUpload');\n\nfunction isXml(xhr) {\n  var contentType = xhr.headers ? xhr.headers['content-type'] : xhr.getResponseHeader('Content-Type');\n  return typeof contentType === 'string' && contentType.toLowerCase() === 'application/xml';\n}\n\nmodule.exports = function (_Plugin) {\n  _inherits(AwsS3, _Plugin);\n\n  function AwsS3(uppy, opts) {\n    _classCallCheck(this, AwsS3);\n\n    var _this = _possibleConstructorReturn(this, _Plugin.call(this, uppy, opts));\n\n    _this.type = 'uploader';\n    _this.id = 'AwsS3';\n    _this.title = 'AWS S3';\n\n    var defaultLocale = {\n      strings: {\n        preparingUpload: 'Preparing upload...'\n      }\n    };\n\n    var defaultOptions = {\n      timeout: 30 * 1000,\n      limit: 0,\n      getUploadParameters: _this.getUploadParameters.bind(_this),\n      locale: defaultLocale\n    };\n\n    _this.opts = _extends({}, defaultOptions, opts);\n    _this.locale = _extends({}, defaultLocale, _this.opts.locale);\n    _this.locale.strings = _extends({}, defaultLocale.strings, _this.opts.locale.strings);\n\n    _this.translator = new Translator({ locale: _this.locale });\n    _this.i18n = _this.translator.translate.bind(_this.translator);\n\n    _this.prepareUpload = _this.prepareUpload.bind(_this);\n\n    if (typeof _this.opts.limit === 'number' && _this.opts.limit !== 0) {\n      _this.limitRequests = limitPromises(_this.opts.limit);\n    } else {\n      _this.limitRequests = function (fn) {\n        return fn;\n      };\n    }\n    return _this;\n  }\n\n  AwsS3.prototype.getUploadParameters = function getUploadParameters(file) {\n    if (!this.opts.host) {\n      throw new Error('Expected a `host` option containing an uppy-server address.');\n    }\n\n    var filename = encodeURIComponent(file.name);\n    var type = encodeURIComponent(file.type);\n    return fetch(this.opts.host + '/s3/params?filename=' + filename + '&type=' + type, {\n      method: 'get',\n      headers: { accept: 'application/json' }\n    }).then(function (response) {\n      return response.json();\n    });\n  };\n\n  AwsS3.prototype.validateParameters = function validateParameters(file, params) {\n    var valid = (typeof params === 'undefined' ? 'undefined' : _typeof(params)) === 'object' && params && typeof params.url === 'string' && (_typeof(params.fields) === 'object' || params.fields == null) && (params.method == null || /^(put|post)$/i.test(params.method));\n\n    if (!valid) {\n      var err = new TypeError('AwsS3: got incorrect result from \\'getUploadParameters()\\' for file \\'' + file.name + '\\', expected an object \\'{ url, method, fields }\\'.\\nSee https://uppy.io/docs/aws-s3/#getUploadParameters-file for more on the expected format.');\n      console.error(err);\n      throw err;\n    }\n\n    return params;\n  };\n\n  AwsS3.prototype.prepareUpload = function prepareUpload(fileIDs) {\n    var _this2 = this;\n\n    fileIDs.forEach(function (id) {\n      var file = _this2.uppy.getFile(id);\n      _this2.uppy.emit('preprocess-progress', file, {\n        mode: 'determinate',\n        message: _this2.i18n('preparingUpload'),\n        value: 0\n      });\n    });\n\n    var getUploadParameters = this.limitRequests(this.opts.getUploadParameters);\n\n    return _Promise.all(fileIDs.map(function (id) {\n      var file = _this2.uppy.getFile(id);\n      var paramsPromise = _Promise.resolve().then(function () {\n        return getUploadParameters(file);\n      });\n      return paramsPromise.then(function (params) {\n        return _this2.validateParameters(file, params);\n      }).then(function (params) {\n        _this2.uppy.emit('preprocess-progress', file, {\n          mode: 'determinate',\n          message: _this2.i18n('preparingUpload'),\n          value: 1\n        });\n        return params;\n      }).catch(function (error) {\n        _this2.uppy.emit('upload-error', file, error);\n      });\n    })).then(function (responses) {\n      var updatedFiles = {};\n      fileIDs.forEach(function (id, index) {\n        var file = _this2.uppy.getFile(id);\n        if (file.error) {\n          return;\n        }\n\n        var _responses$index = responses[index],\n            _responses$index$meth = _responses$index.method,\n            method = _responses$index$meth === undefined ? 'post' : _responses$index$meth,\n            url = _responses$index.url,\n            fields = _responses$index.fields,\n            headers = _responses$index.headers;\n\n        var xhrOpts = {\n          method: method,\n          formData: method.toLowerCase() === 'post',\n          endpoint: url,\n          metaFields: Object.keys(fields)\n        };\n\n        if (headers) {\n          xhrOpts.headers = headers;\n        }\n\n        var updatedFile = _extends({}, file, {\n          meta: _extends({}, file.meta, fields),\n          xhrUpload: xhrOpts\n        });\n\n        updatedFiles[id] = updatedFile;\n      });\n\n      _this2.uppy.setState({\n        files: _extends({}, _this2.uppy.getState().files, updatedFiles)\n      });\n\n      fileIDs.forEach(function (id) {\n        var file = _this2.uppy.getFile(id);\n        _this2.uppy.emit('preprocess-complete', file);\n      });\n    });\n  };\n\n  AwsS3.prototype.install = function install() {\n    this.uppy.addPreProcessor(this.prepareUpload);\n\n    this.uppy.use(XHRUpload, {\n      fieldName: 'file',\n      responseUrlFieldName: 'location',\n      timeout: this.opts.timeout,\n      limit: this.opts.limit,\n      getResponseData: function getResponseData(content, xhr) {\n        // If no response, we've hopefully done a PUT request to the file\n        // in the bucket on its full URL.\n        if (!isXml(xhr)) {\n          return { location: xhr.responseURL };\n        }\n\n        var getValue = function getValue() {\n          return '';\n        };\n        if (xhr.responseXML) {\n          getValue = function getValue(key) {\n            var el = xhr.responseXML.querySelector(key);\n            return el ? el.textContent : '';\n          };\n        }\n\n        if (xhr.responseText) {\n          getValue = function getValue(key) {\n            var start = xhr.responseText.indexOf('<' + key + '>');\n            var end = xhr.responseText.indexOf('</' + key + '>');\n            return start !== -1 && end !== -1 ? xhr.responseText.slice(start + key.length + 2, end) : '';\n          };\n        }\n\n        return {\n          location: getValue('Location'),\n          bucket: getValue('Bucket'),\n          key: getValue('Key'),\n          etag: getValue('ETag')\n        };\n      },\n      getResponseError: function getResponseError(content, xhr) {\n        // If no response, we don't have a specific error message, use the default.\n        if (!isXml(xhr)) {\n          return;\n        }\n        var error = xhr.responseXML.querySelector('Error > Message');\n        return new Error(error.textContent);\n      }\n    });\n  };\n\n  AwsS3.prototype.uninstall = function uninstall() {\n    var uploader = this.uppy.getPlugin('XHRUpload');\n    this.uppy.removePlugin(uploader);\n\n    this.uppy.removePreProcessor(this.prepareUpload);\n  };\n\n  return AwsS3;\n}(Plugin);\n//# sourceMappingURL=index.js.map",null]}