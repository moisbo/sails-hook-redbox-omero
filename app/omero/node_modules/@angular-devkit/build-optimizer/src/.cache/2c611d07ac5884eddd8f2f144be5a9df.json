{"remainingRequest":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/uppy/lib/plugins/GoldenRetriever/ServiceWorkerStore.js","dependencies":[{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/uppy/lib/plugins/GoldenRetriever/ServiceWorkerStore.js","mtime":1521677673000},{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/cache-loader/dist/cjs.js","mtime":1528352013145},{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _Promise = typeof Promise === 'undefined' ? require('es6-promise').Promise : Promise;\n\nvar isSupported = typeof navigator !== 'undefined' && 'serviceWorker' in navigator;\n\nfunction waitForServiceWorker() {\n  return new _Promise(function (resolve, reject) {\n    if (!isSupported) {\n      reject(new Error('Unsupported'));\n    } else if (navigator.serviceWorker.controller) {\n      // A serviceWorker is already registered and active.\n      resolve();\n    } else {\n      navigator.serviceWorker.addEventListener('controllerchange', function () {\n        resolve();\n      });\n    }\n  });\n}\n\nvar ServiceWorkerStore = function () {\n  function ServiceWorkerStore(opts) {\n    _classCallCheck(this, ServiceWorkerStore);\n\n    this.ready = waitForServiceWorker();\n    this.name = opts.storeName;\n  }\n\n  ServiceWorkerStore.prototype.list = function list() {\n    var _this = this;\n\n    var defer = {};\n    var promise = new _Promise(function (resolve, reject) {\n      defer.resolve = resolve;\n      defer.reject = reject;\n    });\n\n    console.log('Loading stored blobs from Service Worker');\n    var onMessage = function onMessage(event) {\n      if (event.data.store !== _this.name) {\n        return;\n      }\n      switch (event.data.type) {\n        case 'uppy/ALL_FILES':\n          defer.resolve(event.data.files);\n          navigator.serviceWorker.removeEventListener('message', onMessage);\n          break;\n      }\n    };\n\n    this.ready.then(function () {\n      navigator.serviceWorker.addEventListener('message', onMessage);\n\n      navigator.serviceWorker.controller.postMessage({\n        type: 'uppy/GET_FILES',\n        store: _this.name\n      });\n    });\n\n    return promise;\n  };\n\n  ServiceWorkerStore.prototype.put = function put(file) {\n    var _this2 = this;\n\n    return this.ready.then(function () {\n      navigator.serviceWorker.controller.postMessage({\n        type: 'uppy/ADD_FILE',\n        store: _this2.name,\n        file: file\n      });\n    });\n  };\n\n  ServiceWorkerStore.prototype.delete = function _delete(fileID) {\n    var _this3 = this;\n\n    return this.ready.then(function () {\n      navigator.serviceWorker.controller.postMessage({\n        type: 'uppy/REMOVE_FILE',\n        store: _this3.name,\n        fileID: fileID\n      });\n    });\n  };\n\n  return ServiceWorkerStore;\n}();\n\nServiceWorkerStore.isSupported = isSupported;\n\nmodule.exports = ServiceWorkerStore;\n//# sourceMappingURL=ServiceWorkerStore.js.map",null]}