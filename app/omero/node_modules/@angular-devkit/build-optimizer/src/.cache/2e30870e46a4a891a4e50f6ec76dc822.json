{"remainingRequest":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/uppy/lib/plugins/Form.js","dependencies":[{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/uppy/lib/plugins/Form.js","mtime":1521677672000},{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/cache-loader/dist/cjs.js","mtime":1528352013145},{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Plugin = require('../core/Plugin');\n\nvar _require = require('../core/Utils'),\n    findDOMElement = _require.findDOMElement;\n// Rollup uses get-form-data's ES modules build, and rollup-plugin-commonjs automatically resolves `.default`.\n// So, if we are being built using rollup, this require() won't have a `.default` property.\n\n\nvar getFormData = require('get-form-data').default || require('get-form-data');\n\n/**\n * Form\n */\nmodule.exports = function (_Plugin) {\n  _inherits(Form, _Plugin);\n\n  function Form(uppy, opts) {\n    _classCallCheck(this, Form);\n\n    var _this = _possibleConstructorReturn(this, _Plugin.call(this, uppy, opts));\n\n    _this.type = 'acquirer';\n    _this.id = 'Form';\n    _this.title = 'Form';\n\n    // set default options\n    var defaultOptions = {\n      target: null,\n      resultName: 'uppyResult',\n      getMetaFromForm: true,\n      addResultToForm: true,\n      submitOnSuccess: false,\n      triggerUploadOnSubmit: false\n\n      // merge default options with the ones set by user\n    };_this.opts = _extends({}, defaultOptions, opts);\n\n    _this.handleFormSubmit = _this.handleFormSubmit.bind(_this);\n    _this.handleUploadStart = _this.handleUploadStart.bind(_this);\n    _this.handleSuccess = _this.handleSuccess.bind(_this);\n    _this.addResultToForm = _this.addResultToForm.bind(_this);\n    _this.getMetaFromForm = _this.getMetaFromForm.bind(_this);\n    return _this;\n  }\n\n  Form.prototype.handleUploadStart = function handleUploadStart() {\n    if (this.opts.getMetaFromForm) {\n      this.getMetaFromForm();\n    }\n  };\n\n  Form.prototype.handleSuccess = function handleSuccess(result) {\n    if (this.opts.addResultToForm) {\n      this.addResultToForm(result);\n    }\n\n    if (this.opts.submitOnSuccess) {\n      this.form.submit();\n    }\n  };\n\n  Form.prototype.handleFormSubmit = function handleFormSubmit(ev) {\n    if (this.opts.triggerUploadOnSubmit) {\n      ev.preventDefault();\n      this.uppy.upload();\n    }\n  };\n\n  Form.prototype.addResultToForm = function addResultToForm(result) {\n    this.uppy.log('[Form] Adding result to the original form:');\n    this.uppy.log(result);\n\n    var resultInput = this.form.querySelector('[name=\"' + this.opts.resultName + '\"]');\n    if (resultInput) {\n      resultInput.value = JSON.stringify(result);\n      return;\n    }\n\n    resultInput = document.createElement('input');\n    resultInput.name = this.opts.resultName;\n    resultInput.type = 'hidden';\n    resultInput.value = JSON.stringify(result);\n    this.form.appendChild(resultInput);\n  };\n\n  Form.prototype.getMetaFromForm = function getMetaFromForm() {\n    var formMeta = getFormData(this.form);\n    this.uppy.setMeta(formMeta);\n  };\n\n  Form.prototype.install = function install() {\n    this.form = findDOMElement(this.opts.target);\n    if (!this.form || !this.form.nodeName === 'FORM') {\n      console.error('Form plugin requires a <form> target element passed in options to operate, none was found', 'error');\n      return;\n    }\n\n    this.form.addEventListener('submit', this.handleFormSubmit);\n    this.uppy.on('upload', this.handleUploadStart);\n    this.uppy.on('complete', this.handleSuccess);\n  };\n\n  Form.prototype.uninstall = function uninstall() {\n    this.form.removeEventListener('submit', this.handleFormSubmit);\n    this.uppy.off('upload', this.handleUploadStart);\n    this.uppy.off('complete', this.handleSuccess);\n  };\n\n  return Form;\n}(Plugin);\n//# sourceMappingURL=Form.js.map",null]}