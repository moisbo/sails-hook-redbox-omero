{"remainingRequest":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/angular2-markdown/markdown/markdown.component.js","dependencies":[{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/angular2-markdown/markdown/markdown.component.js","mtime":1492937164000},{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/cache-loader/dist/cjs.js","mtime":1528352013145},{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Component, ElementRef, Input } from '@angular/core';\nimport { Http } from '@angular/http';\nimport { MarkdownService } from './markdown.service';\nimport './prism.languages';\nvar MarkdownComponent = /*@__PURE__*/ (function () {\n    function MarkdownComponent(mdService, el, http) {\n        this.mdService = mdService;\n        this.el = el;\n        this.http = http;\n        this.changeLog = [];\n    }\n    MarkdownComponent.prototype.ngOnInit = function () {\n    };\n    Object.defineProperty(MarkdownComponent.prototype, \"path\", {\n        set: function (value) {\n            this._path = value;\n            this.onPathChange();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MarkdownComponent.prototype, \"data\", {\n        set: function (value) {\n            this._data = value;\n            this.onDataChange(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // on input\n    MarkdownComponent.prototype.onDataChange = function (data) {\n        this.el.nativeElement.innerHTML = this.mdService.compile(data);\n        Prism.highlightAll(false);\n    };\n    /**\n     *  After view init\n     */\n    MarkdownComponent.prototype.ngAfterViewInit = function () {\n        if (this._path) {\n            this.onPathChange();\n        }\n        else {\n            this.processRaw();\n        }\n    };\n    MarkdownComponent.prototype.processRaw = function () {\n        this._md = this.prepare(this.el.nativeElement.innerHTML);\n        this.el.nativeElement.innerHTML = this.mdService.compile(this._md);\n        Prism.highlightAll(false);\n    };\n    /**\n     * get remote conent;\n     */\n    MarkdownComponent.prototype.onPathChange = function () {\n        var _this = this;\n        this._ext = this._path && this._path.split('.').splice(-1).join();\n        this.mdService.getContent(this._path)\n            .subscribe(function (data) {\n            _this._md = _this._ext !== 'md' ? '```' + _this._ext + '\\n' + data + '\\n```' : data;\n            _this.el.nativeElement.innerHTML = _this.mdService.compile(_this.prepare(_this._md));\n            Prism.highlightAll(false);\n        }, function (err) { return _this.handleError; });\n    };\n    /**\n     * catch http error\n     */\n    MarkdownComponent.prototype.handleError = function (error) {\n        console.error('An error occurred', error); // for demo purposes only\n        return Promise.reject(error.message || error);\n    };\n    /**\n     * Prepare string\n     */\n    MarkdownComponent.prototype.prepare = function (raw) {\n        var _this = this;\n        if (!raw) {\n            return '';\n        }\n        if (this._ext === 'md' || !this.path) {\n            var isCodeBlock_1 = false;\n            return raw.split('\\n').map(function (line) {\n                if (_this.trimLeft(line).substring(0, 3) === \"```\") {\n                    isCodeBlock_1 = !isCodeBlock_1;\n                }\n                return isCodeBlock_1 ? line : line.trim();\n            }).join('\\n');\n        }\n        return raw.replace(/\\\"/g, '\\'');\n    };\n    /**\n     * Trim left whitespace\n     */\n    MarkdownComponent.prototype.trimLeft = function (line) {\n        return line.replace(/^\\s+|\\s+$/g, '');\n    };\n    return MarkdownComponent;\n}());\nexport { MarkdownComponent };\n//# sourceMappingURL=markdown.component.js.map \n",null]}