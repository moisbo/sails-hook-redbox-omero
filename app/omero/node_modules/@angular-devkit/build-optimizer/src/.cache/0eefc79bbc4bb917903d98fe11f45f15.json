{"remainingRequest":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/angular2-markdown/markdown/markdown.service.js","dependencies":[{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/angular2-markdown/markdown/markdown.service.js","mtime":1492937164000},{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/cache-loader/dist/cjs.js","mtime":1528352013145},{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Injectable } from '@angular/core';\nimport { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\nimport * as marked from 'marked';\nimport 'rxjs/add/observable/throw';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/map';\nvar MarkdownService = /*@__PURE__*/ (function () {\n    function MarkdownService(http) {\n        this.http = http;\n        this._renderer = new marked.Renderer();\n        this.extendRenderer();\n        this.setMarkedOptions({});\n    }\n    //get the content from remote resource\n    MarkdownService.prototype.getContent = function (path) {\n        return this.http.get(path)\n            .map(this.extractData)\n            .catch(this.handleError);\n    };\n    Object.defineProperty(MarkdownService.prototype, \"renderer\", {\n        get: function () {\n            return this._renderer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // handle data\n    MarkdownService.prototype.extractData = function (res) {\n        return res.text() || '';\n    };\n    MarkdownService.prototype.setMarkedOptions = function (options) {\n        options = Object.assign({\n            gfm: true,\n            tables: true,\n            breaks: false,\n            pedantic: false,\n            sanitize: false,\n            smartLists: true,\n            smartypants: false\n        }, options);\n        options.renderer = this._renderer;\n        marked.setOptions(options);\n    };\n    // comple markdown to html\n    MarkdownService.prototype.compile = function (data) {\n        return marked(data);\n    };\n    //handle error\n    MarkdownService.prototype.handleError = function (error) {\n        var errMsg;\n        if (error instanceof Response) {\n            var body = error.json() || '';\n            var err = body.error || JSON.stringify(body);\n            errMsg = error.status + \" - \" + (error.statusText || '') + \" \" + err;\n        }\n        else {\n            errMsg = error.message ? error.message : error.toString();\n        }\n        console.error(errMsg);\n        return Observable.throw(errMsg);\n    };\n    // extend marked render to support todo checkbox\n    MarkdownService.prototype.extendRenderer = function () {\n        this._renderer.listitem = function (text) {\n            if (/^\\s*\\[[x ]\\]\\s*/.test(text)) {\n                text = text\n                    .replace(/^\\s*\\[ \\]\\s*/, '<input type=\"checkbox\" style=\" vertical-align: middle; margin: 0 0.2em 0.25em -1.6em; font-size: 16px; \" disabled> ')\n                    .replace(/^\\s*\\[x\\]\\s*/, '<input type=\"checkbox\" style=\" vertical-align: middle; margin: 0 0.2em 0.25em -1.6em; font-size: 16px; \" checked disabled> ');\n                return '<li style=\"list-style: none\">' + text + '</li>';\n            }\n            else {\n                return '<li>' + text + '</li>';\n            }\n        };\n    };\n    return MarkdownService;\n}());\nexport { MarkdownService };\n//# sourceMappingURL=markdown.service.js.map \n",null]}