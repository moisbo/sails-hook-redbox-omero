{"remainingRequest":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/uppy/lib/plugins/GoldenRetriever/MetaDataStore.js","dependencies":[{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/uppy/lib/plugins/GoldenRetriever/MetaDataStore.js","mtime":1521677673000},{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/cache-loader/dist/cjs.js","mtime":1528352013145},{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Get uppy instance IDs for which state is stored.\n */\nfunction findUppyInstances() {\n  var instances = [];\n  for (var i = 0; i < localStorage.length; i++) {\n    var key = localStorage.key(i);\n    if (/^uppyState:/.test(key)) {\n      instances.push(key.slice('uppyState:'.length));\n    }\n  }\n  return instances;\n}\n\n/**\n * Try to JSON-parse a string, return null on failure.\n */\nfunction maybeParse(str) {\n  try {\n    return JSON.parse(str);\n  } catch (err) {\n    return null;\n  }\n}\n\nvar cleanedUp = false;\nmodule.exports = function () {\n  function MetaDataStore(opts) {\n    _classCallCheck(this, MetaDataStore);\n\n    this.opts = _extends({\n      expires: 24 * 60 * 60 * 1000 // 24 hours\n    }, opts);\n    this.name = 'uppyState:' + opts.storeName;\n\n    if (!cleanedUp) {\n      cleanedUp = true;\n      MetaDataStore.cleanup();\n    }\n  }\n\n  /**\n   *\n   */\n\n\n  MetaDataStore.prototype.load = function load() {\n    var savedState = localStorage.getItem(this.name);\n    if (!savedState) return null;\n    var data = maybeParse(savedState);\n    if (!data) return null;\n\n    // Upgrade pre-0.20.0 uppyState: it used to be just a flat object,\n    // without `expires`.\n    if (!data.metadata) {\n      this.save(data);\n      return data;\n    }\n\n    return data.metadata;\n  };\n\n  MetaDataStore.prototype.save = function save(metadata) {\n    var expires = Date.now() + this.opts.expires;\n    var state = JSON.stringify({\n      metadata: metadata,\n      expires: expires\n    });\n    localStorage.setItem(this.name, state);\n  };\n\n  /**\n   * Remove all expired state.\n   */\n\n\n  MetaDataStore.cleanup = function cleanup() {\n    var instanceIDs = findUppyInstances();\n    var now = Date.now();\n    instanceIDs.forEach(function (id) {\n      var data = localStorage.getItem('uppyState:' + id);\n      if (!data) return null;\n      var obj = maybeParse(data);\n      if (!obj) return null;\n\n      if (obj.expires && obj.expires < now) {\n        localStorage.removeItem('uppyState:' + id);\n      }\n    });\n  };\n\n  return MetaDataStore;\n}();\n//# sourceMappingURL=MetaDataStore.js.map",null]}