{"remainingRequest":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/uppy/lib/plugins/GoldenRetriever/index.js","dependencies":[{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/uppy/lib/plugins/GoldenRetriever/index.js","mtime":1521677673000},{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/cache-loader/dist/cjs.js","mtime":1528352013145},{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _Promise = typeof Promise === 'undefined' ? require('es6-promise').Promise : Promise;\n\nvar Plugin = require('../../core/Plugin');\nvar ServiceWorkerStore = require('./ServiceWorkerStore');\nvar IndexedDBStore = require('./IndexedDBStore');\nvar MetaDataStore = require('./MetaDataStore');\n\n/**\n* The GoldenRetriever plugin â€” restores selected files and resumes uploads\n* after a closed tab or a browser crash!\n*\n* Uses localStorage, IndexedDB and ServiceWorker to do its magic, read more:\n* https://uppy.io/blog/2017/07/golden-retriever/\n*/\nmodule.exports = function (_Plugin) {\n  _inherits(GoldenRetriever, _Plugin);\n\n  function GoldenRetriever(uppy, opts) {\n    _classCallCheck(this, GoldenRetriever);\n\n    var _this = _possibleConstructorReturn(this, _Plugin.call(this, uppy, opts));\n\n    _this.type = 'debugger';\n    _this.id = 'GoldenRetriever';\n    _this.title = 'Golden Retriever';\n\n    var defaultOptions = {\n      expires: 24 * 60 * 60 * 1000, // 24 hours\n      serviceWorker: false\n    };\n\n    _this.opts = _extends({}, defaultOptions, opts);\n\n    _this.MetaDataStore = new MetaDataStore({\n      expires: _this.opts.expires,\n      storeName: uppy.getID()\n    });\n    _this.ServiceWorkerStore = null;\n    if (_this.opts.serviceWorker) {\n      _this.ServiceWorkerStore = new ServiceWorkerStore({ storeName: uppy.getID() });\n    }\n    _this.IndexedDBStore = new IndexedDBStore(_extends({ expires: _this.opts.expires }, opts.indexedDB || {}, { storeName: uppy.getID() }));\n\n    _this.saveFilesStateToLocalStorage = _this.saveFilesStateToLocalStorage.bind(_this);\n    _this.loadFilesStateFromLocalStorage = _this.loadFilesStateFromLocalStorage.bind(_this);\n    _this.loadFileBlobsFromServiceWorker = _this.loadFileBlobsFromServiceWorker.bind(_this);\n    _this.loadFileBlobsFromIndexedDB = _this.loadFileBlobsFromIndexedDB.bind(_this);\n    _this.onBlobsLoaded = _this.onBlobsLoaded.bind(_this);\n    return _this;\n  }\n\n  GoldenRetriever.prototype.loadFilesStateFromLocalStorage = function loadFilesStateFromLocalStorage() {\n    var savedState = this.MetaDataStore.load();\n\n    if (savedState) {\n      this.uppy.log('[GoldenRetriever] Recovered some state from Local Storage');\n      this.uppy.setState({\n        currentUploads: savedState.currentUploads || {},\n        files: savedState.files || {}\n      });\n\n      this.savedPluginData = savedState.pluginData;\n    }\n  };\n\n  /**\n   * Get file objects that are currently waiting: they've been selected,\n   * but aren't yet being uploaded.\n   */\n\n\n  GoldenRetriever.prototype.getWaitingFiles = function getWaitingFiles() {\n    var _this2 = this;\n\n    var waitingFiles = {};\n\n    var allFiles = this.uppy.state.files;\n    Object.keys(allFiles).forEach(function (fileID) {\n      var file = _this2.uppy.getFile(fileID);\n      if (!file.progress || !file.progress.uploadStarted) {\n        waitingFiles[fileID] = file;\n      }\n    });\n\n    return waitingFiles;\n  };\n\n  /**\n   * Get file objects that are currently being uploaded. If a file has finished\n   * uploading, but the other files in the same batch have not, the finished\n   * file is also returned.\n   */\n\n\n  GoldenRetriever.prototype.getUploadingFiles = function getUploadingFiles() {\n    var _this3 = this;\n\n    var uploadingFiles = {};\n\n    var currentUploads = this.uppy.state.currentUploads;\n\n    if (currentUploads) {\n      var uploadIDs = Object.keys(currentUploads);\n      uploadIDs.forEach(function (uploadID) {\n        var filesInUpload = currentUploads[uploadID].fileIDs;\n        filesInUpload.forEach(function (fileID) {\n          uploadingFiles[fileID] = _this3.uppy.getFile(fileID);\n        });\n      });\n    }\n\n    return uploadingFiles;\n  };\n\n  GoldenRetriever.prototype.saveFilesStateToLocalStorage = function saveFilesStateToLocalStorage() {\n    var filesToSave = _extends(this.getWaitingFiles(), this.getUploadingFiles());\n\n    var pluginData = {};\n    // TODO Find a better way to do this?\n    // Other plugins can attach a restore:get-data listener that receives this callback.\n    // Plugins can then use this callback (sync) to provide data to be stored.\n    this.uppy.emit('restore:get-data', function (data) {\n      _extends(pluginData, data);\n    });\n\n    this.MetaDataStore.save({\n      currentUploads: this.uppy.state.currentUploads,\n      files: filesToSave,\n      pluginData: pluginData\n    });\n  };\n\n  GoldenRetriever.prototype.loadFileBlobsFromServiceWorker = function loadFileBlobsFromServiceWorker() {\n    var _this4 = this;\n\n    this.ServiceWorkerStore.list().then(function (blobs) {\n      var numberOfFilesRecovered = Object.keys(blobs).length;\n      var numberOfFilesTryingToRecover = Object.keys(_this4.uppy.state.files).length;\n      if (numberOfFilesRecovered === numberOfFilesTryingToRecover) {\n        _this4.uppy.log('[GoldenRetriever] Successfully recovered ' + numberOfFilesRecovered + ' blobs from Service Worker!');\n        _this4.uppy.info('Successfully recovered ' + numberOfFilesRecovered + ' files', 'success', 3000);\n        return _this4.onBlobsLoaded(blobs);\n      }\n      _this4.uppy.log('[GoldenRetriever] No blobs found in Service Worker, trying IndexedDB now...');\n      return _this4.loadFileBlobsFromIndexedDB();\n    }).catch(function (err) {\n      _this4.uppy.log('[GoldenRetriever] Failed to recover blobs from Service Worker', 'warning');\n      _this4.uppy.log(err);\n    });\n  };\n\n  GoldenRetriever.prototype.loadFileBlobsFromIndexedDB = function loadFileBlobsFromIndexedDB() {\n    var _this5 = this;\n\n    this.IndexedDBStore.list().then(function (blobs) {\n      var numberOfFilesRecovered = Object.keys(blobs).length;\n\n      if (numberOfFilesRecovered > 0) {\n        _this5.uppy.log('[GoldenRetriever] Successfully recovered ' + numberOfFilesRecovered + ' blobs from IndexedDB!');\n        _this5.uppy.info('Successfully recovered ' + numberOfFilesRecovered + ' files', 'success', 3000);\n        return _this5.onBlobsLoaded(blobs);\n      }\n      _this5.uppy.log('[GoldenRetriever] No blobs found in IndexedDB');\n    }).catch(function (err) {\n      _this5.uppy.log('[GoldenRetriever] Failed to recover blobs from IndexedDB', 'warning');\n      _this5.uppy.log(err);\n    });\n  };\n\n  GoldenRetriever.prototype.onBlobsLoaded = function onBlobsLoaded(blobs) {\n    var _this6 = this;\n\n    var obsoleteBlobs = [];\n    var updatedFiles = _extends({}, this.uppy.state.files);\n    Object.keys(blobs).forEach(function (fileID) {\n      var originalFile = _this6.uppy.getFile(fileID);\n      if (!originalFile) {\n        obsoleteBlobs.push(fileID);\n        return;\n      }\n\n      var cachedData = blobs[fileID];\n\n      var updatedFileData = {\n        data: cachedData,\n        isRestored: true\n      };\n      var updatedFile = _extends({}, originalFile, updatedFileData);\n      updatedFiles[fileID] = updatedFile;\n\n      _this6.uppy.generatePreview(updatedFile);\n    });\n\n    this.uppy.setState({\n      files: updatedFiles\n    });\n\n    this.uppy.emit('restored', this.savedPluginData);\n\n    if (obsoleteBlobs.length) {\n      this.deleteBlobs(obsoleteBlobs).then(function () {\n        _this6.uppy.log('[GoldenRetriever] Cleaned up ' + obsoleteBlobs.length + ' old files');\n      }).catch(function (err) {\n        _this6.uppy.log('[GoldenRetriever] Could not clean up ' + obsoleteBlobs.length + ' old files', 'warning');\n        _this6.uppy.log(err);\n      });\n    }\n  };\n\n  GoldenRetriever.prototype.deleteBlobs = function deleteBlobs(fileIDs) {\n    var _this7 = this;\n\n    var promises = [];\n    fileIDs.forEach(function (id) {\n      if (_this7.ServiceWorkerStore) {\n        promises.push(_this7.ServiceWorkerStore.delete(id));\n      }\n      if (_this7.IndexedDBStore) {\n        promises.push(_this7.IndexedDBStore.delete(id));\n      }\n    });\n    return _Promise.all(promises);\n  };\n\n  GoldenRetriever.prototype.install = function install() {\n    var _this8 = this;\n\n    this.loadFilesStateFromLocalStorage();\n\n    if (Object.keys(this.uppy.state.files).length > 0) {\n      if (this.ServiceWorkerStore) {\n        this.uppy.log('[GoldenRetriever] Attempting to load files from Service Worker...');\n        this.loadFileBlobsFromServiceWorker();\n      } else {\n        this.uppy.log('[GoldenRetriever] Attempting to load files from Indexed DB...');\n        this.loadFileBlobsFromIndexedDB();\n      }\n    } else {\n      this.uppy.log('[GoldenRetriever] No files need to be loaded, only restoring processing state...');\n      this.onBlobsLoaded([]);\n    }\n\n    this.uppy.on('file-added', function (file) {\n      if (file.isRemote) return;\n\n      if (_this8.ServiceWorkerStore) {\n        _this8.ServiceWorkerStore.put(file).catch(function (err) {\n          _this8.uppy.log('[GoldenRetriever] Could not store file', 'warning');\n          _this8.uppy.log(err);\n        });\n      }\n\n      _this8.IndexedDBStore.put(file).catch(function (err) {\n        _this8.uppy.log('[GoldenRetriever] Could not store file', 'warning');\n        _this8.uppy.log(err);\n      });\n    });\n\n    this.uppy.on('file-removed', function (file) {\n      if (_this8.ServiceWorkerStore) {\n        _this8.ServiceWorkerStore.delete(file.id).catch(function (err) {\n          _this8.uppy.log('[GoldenRetriever] Failed to remove file', 'warning');\n          _this8.uppy.log(err);\n        });\n      }\n      _this8.IndexedDBStore.delete(file.id).catch(function (err) {\n        _this8.uppy.log('[GoldenRetriever] Failed to remove file', 'warning');\n        _this8.uppy.log(err);\n      });\n    });\n\n    this.uppy.on('complete', function (_ref) {\n      var successful = _ref.successful;\n\n      var fileIDs = successful.map(function (file) {\n        return file.id;\n      });\n      _this8.deleteBlobs(fileIDs).then(function () {\n        _this8.uppy.log('[GoldenRetriever] Removed ' + successful.length + ' files that finished uploading');\n      }).catch(function (err) {\n        _this8.uppy.log('[GoldenRetriever] Could not remove ' + successful.length + ' files that finished uploading', 'warning');\n        _this8.uppy.log(err);\n      });\n    });\n\n    this.uppy.on('state-update', this.saveFilesStateToLocalStorage);\n\n    this.uppy.on('restored', function () {\n      // start all uploads again when file blobs are restored\n      var _uppy$getState = _this8.uppy.getState(),\n          currentUploads = _uppy$getState.currentUploads;\n\n      if (currentUploads) {\n        Object.keys(currentUploads).forEach(function (uploadId) {\n          _this8.uppy.restore(uploadId, currentUploads[uploadId]);\n        });\n      }\n    });\n  };\n\n  return GoldenRetriever;\n}(Plugin);\n//# sourceMappingURL=index.js.map",null]}