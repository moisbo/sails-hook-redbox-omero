{"remainingRequest":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/ts-smart-logger/Logger.js","dependencies":[{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/ts-smart-logger/Logger.js","mtime":1474380664000},{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/cache-loader/dist/cjs.js","mtime":1528352013145},{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["\"use strict\";\nvar LoggerLevelEnum_1 = require('./LoggerLevelEnum');\nvar Utils_1 = require('./Utils');\nvar CONSOLE_FN_DICTIONARY = (_a = {},\n    _a[LoggerLevelEnum_1.LoggerLevelEnum.DEBUG_LEVEL] = 'debug',\n    _a[LoggerLevelEnum_1.LoggerLevelEnum.INFO_LEVEL] = 'info',\n    _a[LoggerLevelEnum_1.LoggerLevelEnum.NOTICE_LEVEL] = 'log',\n    _a[LoggerLevelEnum_1.LoggerLevelEnum.WARN_LEVEL] = 'warn',\n    _a[LoggerLevelEnum_1.LoggerLevelEnum.ERROR_LEVEL] = 'error',\n    _a);\n/**\n * Customizable logging mechanism. The logger should be instantiated via @class LoggerFactory as a member of a class or\n * as a static field.\n *\n * @example:\n *\n * class LoggedFirstClass {\n *\n *  private logger:ILogger = LoggerFactory.makeLogger(LoggedFirstClass);\n *\n *  public logAtFirstClass() {\n *       this.logger.info(1);                                    // <=> console.info(1);\n *       this.logger.warn(() => 2);                              // <=> console.warn(2);\n *       this.logger.error(new Error(\"3\"));                      // <=> console.error(new Error(\"3\"));\n *\n *       this.logger.info(1, 2, 3);                              // <=> console.info(1, 2, 3);\n *       this.logger.warn(() => [1, 2, 3]);                      // <=> console.warn([1, 2, 3]);\n *       this.logger.error(\"Custom error:\", new Error(\"2\"));     // <=> console.error(\"Custom error:\", new Error(\"2\"));\n *       this.logger.debug((logger:IEnvironmentLogger) => {\n *           // Here may be different kinds of complex calculations, performed only in logging mode\n *           logger.write('Debug log mode enabled: ', 1, 2, 3);  // <=> console.debug('Debug log mode enabled: ', 1, 2, 3);\n *       });\n *       this.logger.warn((logger:IEnvironmentLogger) => {\n *           // Here may be different kinds of complex calculations, performed only in logging mode\n *           logger.write('Warn log mode enabled: ', 1, 2, 3);   // <=> console.warn('Warn log mode enabled: ', 1, 2, 3);\n *           return [1, 2, 3].length;                            // <=> console.warn([1, 2, 3].length);\n *       });\n *   }\n *}\n */\nvar Logger = /*@__PURE__*/ (function () {\n    function Logger(loggerConfig) {\n        this.loggerConfig = loggerConfig;\n    }\n    /**\n     * @description: Allows to specify exactly the business logic class for logging.\n     * @example:\n     *  class MyClass {}\n     *  ...\n     *  setLoggedClass(MyClass)\n     *\n     * @param loggedClass The business logic class (optional parameter)\n     * @returns {Logger} The current logger\n     */\n    Logger.prototype.setLoggedClass = function (loggedClass) {\n        this.loggedClass = loggedClass;\n        return this;\n    };\n    /**\n     * @override\n     */\n    Logger.prototype.debug = function () {\n        var payloads = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            payloads[_i - 0] = arguments[_i];\n        }\n        this.write(LoggerLevelEnum_1.LoggerLevelEnum.DEBUG_LEVEL, this.loggerConfig.debugLevelPath, payloads);\n    };\n    /**\n     * @override\n     */\n    Logger.prototype.info = function () {\n        var payloads = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            payloads[_i - 0] = arguments[_i];\n        }\n        this.write(LoggerLevelEnum_1.LoggerLevelEnum.INFO_LEVEL, this.loggerConfig.infoLevelPath, payloads);\n    };\n    /**\n     * @override\n     */\n    Logger.prototype.log = function () {\n        var payloads = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            payloads[_i - 0] = arguments[_i];\n        }\n        this.write(LoggerLevelEnum_1.LoggerLevelEnum.NOTICE_LEVEL, this.loggerConfig.logLevelPath, payloads);\n    };\n    /**\n     * @override\n     */\n    Logger.prototype.warn = function () {\n        var payloads = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            payloads[_i - 0] = arguments[_i];\n        }\n        this.write(LoggerLevelEnum_1.LoggerLevelEnum.WARN_LEVEL, this.loggerConfig.warnLevelPath, payloads);\n    };\n    /**\n     * @override\n     */\n    Logger.prototype.error = function () {\n        var payloads = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            payloads[_i - 0] = arguments[_i];\n        }\n        this.write(LoggerLevelEnum_1.LoggerLevelEnum.ERROR_LEVEL, this.loggerConfig.errorLevelPath, payloads);\n    };\n    /**\n     * @override\n     */\n    Logger.prototype.isDebugEnabled = function () {\n        return this.loggerConfig.logLevel >= LoggerLevelEnum_1.LoggerLevelEnum.DEBUG_LEVEL;\n    };\n    /**\n     * @override\n     */\n    Logger.prototype.isInfoEnabled = function () {\n        return this.loggerConfig.logLevel >= LoggerLevelEnum_1.LoggerLevelEnum.INFO_LEVEL;\n    };\n    /**\n     * @override\n     */\n    Logger.prototype.isLogEnabled = function () {\n        return this.loggerConfig.logLevel >= LoggerLevelEnum_1.LoggerLevelEnum.INFO_LEVEL;\n    };\n    /**\n     * @override\n     */\n    Logger.prototype.isWarnEnabled = function () {\n        return this.loggerConfig.logLevel >= LoggerLevelEnum_1.LoggerLevelEnum.WARN_LEVEL;\n    };\n    /**\n     * @override\n     */\n    Logger.prototype.isErrorEnabled = function () {\n        return this.loggerConfig.logLevel >= LoggerLevelEnum_1.LoggerLevelEnum.ERROR_LEVEL;\n    };\n    /**\n     * Write the message into an output stream or perform payload if it is presented as a callback function.\n     *\n     * @param logLevel The log level\n     * @param configuredLevelPath The regular expression for filtering payloads by their belonging to a specific class\n     * @param payloads The payload for logging (message or callback for execution)\n     */\n    Logger.prototype.write = function (logLevel, configuredLevelPath) {\n        var payloads = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            payloads[_i - 2] = arguments[_i];\n        }\n        if (logLevel > this.loggerConfig.logLevel) {\n            return;\n        }\n        var loggedClassName = this.getLoggedClassName();\n        if (Utils_1.Utils.isPresent(loggedClassName)\n            && Utils_1.Utils.isPresent(configuredLevelPath)\n            && !new RegExp(configuredLevelPath).test(loggedClassName)) {\n            return;\n        }\n        var consoleFn = console[CONSOLE_FN_DICTIONARY[logLevel]];\n        payloads.forEach(function (payload) {\n            if (Utils_1.Utils.isArray(payload)) {\n                if (payload.length && Utils_1.Utils.isFunction(payload[0])) {\n                    var returnsPayload = payload[0]({\n                        write: function () {\n                            var parameters = [];\n                            for (var _i = 0; _i < arguments.length; _i++) {\n                                parameters[_i - 0] = arguments[_i];\n                            }\n                            consoleFn.apply(console, parameters);\n                        }\n                    });\n                    if (Utils_1.Utils.isPresent(returnsPayload)) {\n                        consoleFn.call(console, returnsPayload);\n                    }\n                }\n                else {\n                    consoleFn.apply(console, payload);\n                }\n            }\n            else {\n                consoleFn.call(console, payload);\n            }\n        });\n    };\n    Logger.prototype.getLoggedClassName = function () {\n        if (!Utils_1.Utils.isPresent(this.loggedClass)) {\n            return null;\n        }\n        return Utils_1.Utils.isString(this.loggedClass) ? this.loggedClass : this.loggedClass.name;\n    };\n    return Logger;\n}());\nexports.Logger = Logger;\nvar _a;\n",null]}