{"remainingRequest":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/ng2-tree/src/tree-controller.js","dependencies":[{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/ng2-tree/src/tree-controller.js","mtime":1528354008000},{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/cache-loader/dist/cjs.js","mtime":1528352013145},{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar menu_events_1 = require(\"./menu/menu.events\");\nvar event_utils_1 = require(\"./utils/event.utils\");\nvar fn_utils_1 = require(\"./utils/fn.utils\");\nvar TreeController = /*@__PURE__*/ (function () {\n    function TreeController(component) {\n        this.component = component;\n        this.tree = this.component.tree;\n        this.treeService = this.component.treeService;\n    }\n    TreeController.prototype.select = function () {\n        if (!this.isSelected()) {\n            this.component.onNodeSelected({ button: event_utils_1.MouseButtons.Left });\n        }\n    };\n    TreeController.prototype.unselect = function () {\n        if (this.isSelected()) {\n            this.component.onNodeUnselected({ button: event_utils_1.MouseButtons.Left });\n        }\n    };\n    TreeController.prototype.isSelected = function () {\n        return this.component.isSelected;\n    };\n    TreeController.prototype.expand = function () {\n        if (this.isCollapsed()) {\n            this.component.onSwitchFoldingType();\n        }\n    };\n    TreeController.prototype.expandToParent = function (tree) {\n        var _this = this;\n        if (tree === void 0) {\n            tree = this.tree;\n        }\n        if (tree) {\n            var controller_1 = this.treeService.getController(tree.id);\n            if (controller_1) {\n                requestAnimationFrame(function () {\n                    controller_1.expand();\n                    _this.expandToParent(tree.parent);\n                });\n            }\n        }\n    };\n    TreeController.prototype.isExpanded = function () {\n        return this.tree.isNodeExpanded();\n    };\n    TreeController.prototype.collapse = function () {\n        if (this.isExpanded()) {\n            this.component.onSwitchFoldingType();\n        }\n    };\n    TreeController.prototype.isCollapsed = function () {\n        return this.tree.isNodeCollapsed();\n    };\n    TreeController.prototype.toTreeModel = function () {\n        return this.tree.toTreeModel();\n    };\n    TreeController.prototype.rename = function (newValue) {\n        this.tree.markAsBeingRenamed();\n        this.component.applyNewValue({ type: 'keyup', value: newValue });\n    };\n    TreeController.prototype.remove = function () {\n        this.component.onMenuItemSelected({ nodeMenuItemAction: menu_events_1.NodeMenuItemAction.Remove });\n    };\n    TreeController.prototype.addChild = function (newNode) {\n        if (this.tree.hasDeferredChildren() && !this.tree.childrenWereLoaded()) {\n            return;\n        }\n        var newTree = this.tree.createNode(Array.isArray(newNode.children), newNode);\n        this.treeService.fireNodeCreated(newTree);\n    };\n    TreeController.prototype.addChildAsync = function (newNode) {\n        if (this.tree.hasDeferredChildren() && !this.tree.childrenWereLoaded()) {\n            return Promise.reject(new Error('This node loads its children asynchronously, hence child cannot be added this way'));\n        }\n        var newTree = this.tree.createNode(Array.isArray(newNode.children), newNode);\n        this.treeService.fireNodeCreated(newTree);\n        // This will give TreeInternalComponent to set up a controller for the node\n        return new Promise(function (resolve) {\n            setTimeout(function () {\n                resolve(newTree);\n            });\n        });\n    };\n    TreeController.prototype.changeNodeId = function (id) {\n        if (!id) {\n            throw Error('You should supply an id!');\n        }\n        if (this.treeService.hasController(id)) {\n            throw Error(\"Controller already exists for the given id: \" + id);\n        }\n        this.treeService.deleteController(this.tree.id);\n        this.tree.id = id;\n        this.treeService.setController(this.tree.id, this);\n    };\n    TreeController.prototype.reloadChildren = function () {\n        this.tree.reloadChildren();\n    };\n    TreeController.prototype.setChildren = function (children) {\n        if (!this.tree.isLeaf()) {\n            this.tree.setChildren(children);\n        }\n    };\n    TreeController.prototype.startRenaming = function () {\n        this.tree.markAsBeingRenamed();\n    };\n    TreeController.prototype.check = function () {\n        this.component.onNodeChecked();\n    };\n    TreeController.prototype.uncheck = function () {\n        this.component.onNodeUnchecked();\n    };\n    TreeController.prototype.isChecked = function () {\n        return this.tree.checked;\n    };\n    TreeController.prototype.isIndetermined = function () {\n        return fn_utils_1.get(this.component, 'checkboxElementRef.nativeElement.indeterminate');\n    };\n    TreeController.prototype.allowSelection = function () {\n        this.tree.selectionAllowed = true;\n    };\n    TreeController.prototype.forbidSelection = function () {\n        this.tree.selectionAllowed = false;\n    };\n    TreeController.prototype.isSelectionAllowed = function () {\n        return this.tree.selectionAllowed;\n    };\n    return TreeController;\n}());\nexports.TreeController = TreeController;\n",null]}