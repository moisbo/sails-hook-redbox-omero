{"remainingRequest":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/ng2-tree/src/tree.types.js","dependencies":[{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/ng2-tree/src/tree.types.js","mtime":1528354008000},{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/cache-loader/dist/cjs.js","mtime":1528352013145},{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nvar fn_utils_1 = require('./utils/fn.utils');\nvar FoldingType = (function() {\n  function FoldingType(_cssClass) {\n    this._cssClass = _cssClass;\n  }\n  Object.defineProperty(FoldingType.prototype, 'cssClass', {\n    get: function() {\n      return this._cssClass;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  FoldingType.Expanded = new FoldingType('node-expanded');\n  FoldingType.Collapsed = new FoldingType('node-collapsed');\n  FoldingType.Empty = new FoldingType('node-empty');\n  FoldingType.Leaf = new FoldingType('node-leaf');\n  return FoldingType;\n})();\nexports.FoldingType = FoldingType;\nvar TreeModelSettings = (function() {\n  function TreeModelSettings() {}\n  TreeModelSettings.merge = function(child, parent) {\n    var parentCascadingSettings = fn_utils_1.omit(\n      fn_utils_1.get(parent, 'settings'),\n      TreeModelSettings.NOT_CASCADING_SETTINGS\n    );\n    return fn_utils_1.defaultsDeep({}, fn_utils_1.get(child, 'settings'), parentCascadingSettings, {\n      static: false,\n      leftMenu: false,\n      rightMenu: true,\n      isCollapsedOnInit: false,\n      checked: false,\n      keepNodesInDOM: false,\n      selectionAllowed: true\n    });\n  };\n  TreeModelSettings.NOT_CASCADING_SETTINGS = ['selectionAllowed'];\n  return TreeModelSettings;\n})();\nexports.TreeModelSettings = TreeModelSettings;\nvar Ng2TreeSettings = (function() {\n  function Ng2TreeSettings() {\n    /**\n     * Indicates root visibility in the tree. When true - root is invisible.\n     * @name Ng2TreeSettings#rootIsVisible\n     * @type boolean\n     */\n    this.rootIsVisible = true;\n    this.showCheckboxes = false;\n    this.enableCheckboxes = true;\n    this.cascadeCheckboxSelectToChildren = true;\n  }\n  return Ng2TreeSettings;\n})();\nexports.Ng2TreeSettings = Ng2TreeSettings;\nvar TreeStatus;\n(function(TreeStatus) {\n  TreeStatus[(TreeStatus['New'] = 0)] = 'New';\n  TreeStatus[(TreeStatus['Modified'] = 1)] = 'Modified';\n  TreeStatus[(TreeStatus['IsBeingRenamed'] = 2)] = 'IsBeingRenamed';\n})((TreeStatus = exports.TreeStatus || (exports.TreeStatus = {})));\n//# sourceMappingURL=tree.types.js.map\n",null]}