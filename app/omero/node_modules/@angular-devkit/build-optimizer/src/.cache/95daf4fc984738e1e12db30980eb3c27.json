{"remainingRequest":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/uppy/lib/plugins/Provider/view/index.js","dependencies":[{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/uppy/lib/plugins/Provider/view/index.js","mtime":1521677674000},{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/cache-loader/dist/cjs.js","mtime":1528352013145},{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar AuthView = require('./AuthView');\nvar Browser = require('./Browser');\nvar LoaderView = require('./Loader');\nvar Utils = require('../../../core/Utils');\n\nvar _require = require('preact'),\n    h = _require.h;\n\n/**\n * Class to easily generate generic views for plugins\n *\n *\n * This class expects the plugin instance using it to have the following\n * accessor methods.\n * Each method takes the item whose property is to be accessed\n * as a param\n *\n * isFolder\n *    @return {Boolean} for if the item is a folder or not\n * getItemData\n *    @return {Object} that is format ready for uppy upload/download\n * getItemIcon\n *    @return {Object} html instance of the item's icon\n * getItemSubList\n *    @return {Array} sub-items in the item. e.g a folder may contain sub-items\n * getItemName\n *    @return {String} display friendly name of the item\n * getMimeType\n *    @return {String} mime type of the item\n * getItemId\n *    @return {String} unique id of the item\n * getItemRequestPath\n *    @return {String} unique request path of the item when making calls to uppy server\n * getItemModifiedDate\n *    @return {object} or {String} date of when last the item was modified\n * getItemThumbnailUrl\n *    @return {String}\n */\n\n\nmodule.exports = function () {\n  /**\n   * @param {object} instance of the plugin\n   */\n  function View(plugin, opts) {\n    _classCallCheck(this, View);\n\n    this.plugin = plugin;\n    this.Provider = plugin[plugin.id];\n\n    // set default options\n    var defaultOptions = {\n      viewType: 'list'\n\n      // merge default options with the ones set by user\n    };this.opts = _extends({}, defaultOptions, opts);\n\n    // Logic\n    this.updateFolderState = this.updateFolderState.bind(this);\n    this.addFile = this.addFile.bind(this);\n    this.filterItems = this.filterItems.bind(this);\n    this.filterQuery = this.filterQuery.bind(this);\n    this.toggleSearch = this.toggleSearch.bind(this);\n    this.getFolder = this.getFolder.bind(this);\n    this.getNextFolder = this.getNextFolder.bind(this);\n    this.logout = this.logout.bind(this);\n    this.checkAuth = this.checkAuth.bind(this);\n    this.handleAuth = this.handleAuth.bind(this);\n    this.handleDemoAuth = this.handleDemoAuth.bind(this);\n    this.sortByTitle = this.sortByTitle.bind(this);\n    this.sortByDate = this.sortByDate.bind(this);\n    this.isActiveRow = this.isActiveRow.bind(this);\n    this.isChecked = this.isChecked.bind(this);\n    this.toggleCheckbox = this.toggleCheckbox.bind(this);\n    this.handleError = this.handleError.bind(this);\n    this.handleScroll = this.handleScroll.bind(this);\n    this.donePicking = this.donePicking.bind(this);\n\n    this.plugin.uppy.on('file-removed', this.updateFolderState);\n\n    // Visual\n    this.render = this.render.bind(this);\n  }\n\n  View.prototype.tearDown = function tearDown() {\n    this.plugin.uppy.off('file-removed', this.updateFolderState);\n  };\n\n  View.prototype._updateFilesAndFolders = function _updateFilesAndFolders(res, files, folders) {\n    var _this = this;\n\n    this.plugin.getItemSubList(res).forEach(function (item) {\n      if (_this.plugin.isFolder(item)) {\n        folders.push(item);\n      } else {\n        files.push(item);\n      }\n    });\n\n    this.plugin.setPluginState({ folders: folders, files: files });\n  };\n\n  View.prototype.checkAuth = function checkAuth() {\n    var _this2 = this;\n\n    this.plugin.setPluginState({ checkAuthInProgress: true });\n    this.Provider.checkAuth().then(function (authenticated) {\n      _this2.plugin.setPluginState({ checkAuthInProgress: false });\n      _this2.plugin.onAuth(authenticated);\n    }).catch(function (err) {\n      _this2.plugin.setPluginState({ checkAuthInProgress: false });\n      _this2.handleError(err);\n    });\n  };\n\n  /**\n   * Based on folder ID, fetch a new folder and update it to state\n   * @param  {String} id Folder id\n   * @return {Promise}   Folders/files in folder\n   */\n\n\n  View.prototype.getFolder = function getFolder(id, name) {\n    var _this3 = this;\n\n    return this._loaderWrapper(this.Provider.list(id), function (res) {\n      var folders = [];\n      var files = [];\n      var updatedDirectories = void 0;\n\n      var state = _this3.plugin.getPluginState();\n      var index = state.directories.findIndex(function (dir) {\n        return id === dir.id;\n      });\n\n      if (index !== -1) {\n        updatedDirectories = state.directories.slice(0, index + 1);\n      } else {\n        updatedDirectories = state.directories.concat([{ id: id, title: name || _this3.plugin.getItemName(res) }]);\n      }\n\n      _this3._updateFilesAndFolders(res, files, folders);\n      _this3.plugin.setPluginState({ directories: updatedDirectories });\n    }, this.handleError);\n  };\n\n  /**\n   * Fetches new folder\n   * @param  {Object} Folder\n   * @param  {String} title Folder title\n   */\n\n\n  View.prototype.getNextFolder = function getNextFolder(folder) {\n    var id = this.plugin.getItemRequestPath(folder);\n    this.getFolder(id, this.plugin.getItemName(folder));\n    this.lastCheckbox = undefined;\n  };\n\n  View.prototype.addFile = function addFile(file) {\n    var _this4 = this;\n\n    var isCheckbox = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    var tagFile = {\n      source: this.plugin.id,\n      data: this.plugin.getItemData(file),\n      name: this.plugin.getItemName(file) || this.plugin.getItemId(file),\n      type: this.plugin.getMimeType(file),\n      isRemote: true,\n      body: {\n        fileId: this.plugin.getItemId(file)\n      },\n      remote: {\n        host: this.plugin.opts.host,\n        url: '' + this.Provider.fileUrl(this.plugin.getItemRequestPath(file)),\n        body: {\n          fileId: this.plugin.getItemId(file)\n        }\n      }\n    };\n\n    Utils.getFileType(tagFile).then(function (fileType) {\n      if (fileType && Utils.isPreviewSupported(fileType)) {\n        tagFile.preview = _this4.plugin.getItemThumbnailUrl(file);\n      }\n      _this4.plugin.uppy.log('Adding remote file');\n      _this4.plugin.uppy.addFile(tagFile).catch(function () {\n        // Ignore\n      });\n      if (!isCheckbox) {\n        _this4.donePicking();\n      }\n    });\n  };\n\n  /**\n   * Removes session token on client side.\n   */\n\n\n  View.prototype.logout = function logout() {\n    var _this5 = this;\n\n    this.Provider.logout(location.href).then(function (res) {\n      return res.json();\n    }).then(function (res) {\n      if (res.ok) {\n        var newState = {\n          authenticated: false,\n          files: [],\n          folders: [],\n          directories: []\n        };\n        _this5.plugin.setPluginState(newState);\n      }\n    }).catch(this.handleError);\n  };\n\n  View.prototype.filterQuery = function filterQuery(e) {\n    var state = this.plugin.getPluginState();\n    this.plugin.setPluginState(_extends({}, state, {\n      filterInput: e.target.value\n    }));\n  };\n\n  View.prototype.toggleSearch = function toggleSearch(inputEl) {\n    var state = this.plugin.getPluginState();\n\n    this.plugin.setPluginState({\n      isSearchVisible: !state.isSearchVisible,\n      filterInput: ''\n    });\n  };\n\n  View.prototype.filterItems = function filterItems(items) {\n    var _this6 = this;\n\n    var state = this.plugin.getPluginState();\n    return items.filter(function (folder) {\n      return _this6.plugin.getItemName(folder).toLowerCase().indexOf(state.filterInput.toLowerCase()) !== -1;\n    });\n  };\n\n  View.prototype.sortByTitle = function sortByTitle() {\n    var _this7 = this;\n\n    var state = _extends({}, this.plugin.getPluginState());\n    var files = state.files,\n        folders = state.folders,\n        sorting = state.sorting;\n\n\n    var sortedFiles = files.sort(function (fileA, fileB) {\n      if (sorting === 'titleDescending') {\n        return _this7.plugin.getItemName(fileB).localeCompare(_this7.plugin.getItemName(fileA));\n      }\n      return _this7.plugin.getItemName(fileA).localeCompare(_this7.plugin.getItemName(fileB));\n    });\n\n    var sortedFolders = folders.sort(function (folderA, folderB) {\n      if (sorting === 'titleDescending') {\n        return _this7.plugin.getItemName(folderB).localeCompare(_this7.plugin.getItemName(folderA));\n      }\n      return _this7.plugin.getItemName(folderA).localeCompare(_this7.plugin.getItemName(folderB));\n    });\n\n    this.plugin.setPluginState(_extends({}, state, {\n      files: sortedFiles,\n      folders: sortedFolders,\n      sorting: sorting === 'titleDescending' ? 'titleAscending' : 'titleDescending'\n    }));\n  };\n\n  View.prototype.sortByDate = function sortByDate() {\n    var _this8 = this;\n\n    var state = _extends({}, this.plugin.getPluginState());\n    var files = state.files,\n        folders = state.folders,\n        sorting = state.sorting;\n\n\n    var sortedFiles = files.sort(function (fileA, fileB) {\n      var a = new Date(_this8.plugin.getItemModifiedDate(fileA));\n      var b = new Date(_this8.plugin.getItemModifiedDate(fileB));\n\n      if (sorting === 'dateDescending') {\n        return a > b ? -1 : a < b ? 1 : 0;\n      }\n      return a > b ? 1 : a < b ? -1 : 0;\n    });\n\n    var sortedFolders = folders.sort(function (folderA, folderB) {\n      var a = new Date(_this8.plugin.getItemModifiedDate(folderA));\n      var b = new Date(_this8.plugin.getItemModifiedDate(folderB));\n\n      if (sorting === 'dateDescending') {\n        return a > b ? -1 : a < b ? 1 : 0;\n      }\n\n      return a > b ? 1 : a < b ? -1 : 0;\n    });\n\n    this.plugin.setPluginState(_extends({}, state, {\n      files: sortedFiles,\n      folders: sortedFolders,\n      sorting: sorting === 'dateDescending' ? 'dateAscending' : 'dateDescending'\n    }));\n  };\n\n  View.prototype.sortBySize = function sortBySize() {\n    var _this9 = this;\n\n    var state = _extends({}, this.plugin.getPluginState());\n    var files = state.files,\n        sorting = state.sorting;\n\n    // check that plugin supports file sizes\n\n    if (!files.length || !this.plugin.getItemData(files[0]).size) {\n      return;\n    }\n\n    var sortedFiles = files.sort(function (fileA, fileB) {\n      var a = _this9.plugin.getItemData(fileA).size;\n      var b = _this9.plugin.getItemData(fileB).size;\n\n      if (sorting === 'sizeDescending') {\n        return a > b ? -1 : a < b ? 1 : 0;\n      }\n      return a > b ? 1 : a < b ? -1 : 0;\n    });\n\n    this.plugin.setPluginState(_extends({}, state, {\n      files: sortedFiles,\n      sorting: sorting === 'sizeDescending' ? 'sizeAscending' : 'sizeDescending'\n    }));\n  };\n\n  View.prototype.isActiveRow = function isActiveRow(file) {\n    return this.plugin.getPluginState().activeRow === this.plugin.getItemId(file);\n  };\n\n  View.prototype.isChecked = function isChecked(item) {\n    var itemId = this.providerFileToId(item);\n    if (this.plugin.isFolder(item)) {\n      var state = this.plugin.getPluginState();\n      var folders = state.selectedFolders || {};\n      if (itemId in folders) {\n        return folders[itemId];\n      }\n      return false;\n    }\n    return itemId in this.plugin.uppy.getState().files;\n  };\n\n  /**\n   * Adds all files found inside of specified folder.\n   *\n   * Uses separated state while folder contents are being fetched and\n   * mantains list of selected folders, which are separated from files.\n   */\n\n\n  View.prototype.addFolder = function addFolder(folder) {\n    var _this10 = this;\n\n    var folderId = this.providerFileToId(folder);\n    var state = this.plugin.getPluginState();\n    var folders = state.selectedFolders || {};\n    if (folderId in folders && folders[folderId].loading) {\n      return;\n    }\n    folders[folderId] = { loading: true, files: [] };\n    this.plugin.setPluginState({ selectedFolders: folders });\n    this.Provider.list(this.plugin.getItemRequestPath(folder)).then(function (res) {\n      var files = [];\n      _this10.plugin.getItemSubList(res).forEach(function (item) {\n        if (!_this10.plugin.isFolder(item)) {\n          _this10.addFile(item, true);\n          files.push(_this10.providerFileToId(item));\n        }\n      });\n      state = _this10.plugin.getPluginState();\n      state.selectedFolders[folderId] = { loading: false, files: files };\n      _this10.plugin.setPluginState({ selectedFolders: folders });\n      var dashboard = _this10.plugin.uppy.getPlugin('Dashboard');\n      var message = void 0;\n      if (files.length) {\n        message = dashboard.i18n('folderAdded', {\n          smart_count: files.length, folder: _this10.plugin.getItemName(folder)\n        });\n      } else {\n        message = dashboard.i18n('emptyFolderAdded');\n      }\n      _this10.plugin.uppy.info(message);\n    }).catch(function (e) {\n      state = _this10.plugin.getPluginState();\n      delete state.selectedFolders[folderId];\n      _this10.plugin.setPluginState({ selectedFolders: state.selectedFolders });\n      _this10.handleError(e);\n    });\n  };\n\n  View.prototype.removeFolder = function removeFolder(folderId) {\n    var state = this.plugin.getPluginState();\n    var folders = state.selectedFolders || {};\n    if (!(folderId in folders)) {\n      return;\n    }\n    var folder = folders[folderId];\n    if (folder.loading) {\n      return;\n    }\n    // deepcopy the files before iteration because the\n    // original array constantly gets mutated during\n    // the iteration by updateFolderState as each file\n    // is removed and 'core:file-removed' is emitted.\n    var files = folder.files.concat([]);\n    for (var _iterator = files, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var fileId = _ref;\n\n      if (fileId in this.plugin.uppy.getState().files) {\n        this.plugin.uppy.removeFile(fileId);\n      }\n    }\n    delete folders[folderId];\n    this.plugin.setPluginState({ selectedFolders: folders });\n  };\n\n  /**\n   * Updates selected folders state everytime file is being removed.\n   *\n   * Note that this is only important when files are getting removed from the\n   * main screen, and will do nothing when you uncheck folder directly, since\n   * it's already been done in removeFolder method.\n   */\n\n\n  View.prototype.updateFolderState = function updateFolderState(file) {\n    var state = this.plugin.getPluginState();\n    var folders = state.selectedFolders || {};\n    for (var folderId in folders) {\n      var folder = folders[folderId];\n      if (folder.loading) {\n        continue;\n      }\n      var i = folder.files.indexOf(file.id);\n      if (i > -1) {\n        folder.files.splice(i, 1);\n      }\n      if (!folder.files.length) {\n        delete folders[folderId];\n      }\n    }\n    this.plugin.setPluginState({ selectedFolders: folders });\n  };\n\n  /**\n   * Toggles file/folder checkbox to on/off state while updating files list.\n   *\n   * Note that some extra complexity comes from supporting shift+click to\n   * toggle multiple checkboxes at once, which is done by getting all files\n   * in between last checked file and current one, and applying an on/off state\n   * for all of them, depending on current file state.\n   */\n\n\n  View.prototype.toggleCheckbox = function toggleCheckbox(e, file) {\n    e.stopPropagation();\n    e.preventDefault();\n\n    var _plugin$getPluginStat = this.plugin.getPluginState(),\n        folders = _plugin$getPluginStat.folders,\n        files = _plugin$getPluginStat.files,\n        filterInput = _plugin$getPluginStat.filterInput;\n\n    var items = folders.concat(files);\n    if (filterInput !== '') {\n      items = this.filterItems(items);\n    }\n    var itemsToToggle = [file];\n    if (this.lastCheckbox && e.shiftKey) {\n      var prevIndex = items.indexOf(this.lastCheckbox);\n      var currentIndex = items.indexOf(file);\n      if (prevIndex < currentIndex) {\n        itemsToToggle = items.slice(prevIndex, currentIndex + 1);\n      } else {\n        itemsToToggle = items.slice(currentIndex, prevIndex + 1);\n      }\n    }\n    this.lastCheckbox = file;\n    if (this.isChecked(file)) {\n      for (var _iterator2 = itemsToToggle, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        var item = _ref2;\n\n        var itemId = this.providerFileToId(item);\n        if (this.plugin.isFolder(item)) {\n          this.removeFolder(itemId);\n        } else {\n          if (itemId in this.plugin.uppy.getState().files) {\n            this.plugin.uppy.removeFile(itemId);\n          }\n        }\n      }\n    } else {\n      for (var _iterator3 = itemsToToggle, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n        var _ref3;\n\n        if (_isArray3) {\n          if (_i3 >= _iterator3.length) break;\n          _ref3 = _iterator3[_i3++];\n        } else {\n          _i3 = _iterator3.next();\n          if (_i3.done) break;\n          _ref3 = _i3.value;\n        }\n\n        var _item = _ref3;\n\n        if (this.plugin.isFolder(_item)) {\n          this.addFolder(_item);\n        } else {\n          this.addFile(_item, true);\n        }\n      }\n    }\n  };\n\n  View.prototype.providerFileToId = function providerFileToId(file) {\n    return Utils.generateFileID({\n      data: this.plugin.getItemData(file),\n      name: this.plugin.getItemName(file) || this.plugin.getItemId(file),\n      type: this.plugin.getMimeType(file)\n    });\n  };\n\n  View.prototype.handleDemoAuth = function handleDemoAuth() {\n    var state = this.plugin.getPluginState();\n    this.plugin.setPluginState({}, state, {\n      authenticated: true\n    });\n  };\n\n  View.prototype.handleAuth = function handleAuth() {\n    var _this11 = this;\n\n    var urlId = Math.floor(Math.random() * 999999) + 1;\n    var redirect = '' + location.href + (location.search ? '&' : '?') + 'id=' + urlId;\n\n    var authState = btoa(JSON.stringify({ redirect: redirect }));\n    var link = this.Provider.authUrl() + '?state=' + authState;\n\n    var authWindow = window.open(link, '_blank');\n    var checkAuth = function checkAuth() {\n      var authWindowUrl = void 0;\n\n      try {\n        authWindowUrl = authWindow.location.href;\n      } catch (e) {\n        if (e instanceof DOMException || e instanceof TypeError) {\n          return setTimeout(checkAuth, 100);\n        } else throw e;\n      }\n\n      // split url because chrome adds '#' to redirects\n      if (authWindowUrl && authWindowUrl.split('#')[0] === redirect) {\n        authWindow.close();\n        _this11._loaderWrapper(_this11.Provider.checkAuth(), _this11.plugin.onAuth, _this11.handleError);\n      } else {\n        setTimeout(checkAuth, 100);\n      }\n    };\n\n    checkAuth();\n  };\n\n  View.prototype.handleError = function handleError(error) {\n    var uppy = this.plugin.uppy;\n    var message = uppy.i18n('uppyServerError');\n    uppy.log(error.toString());\n    uppy.info({ message: message, details: error.toString() }, 'error', 5000);\n  };\n\n  View.prototype.handleScroll = function handleScroll(e) {\n    var _this12 = this;\n\n    var scrollPos = e.target.scrollHeight - (e.target.scrollTop + e.target.offsetHeight);\n    var path = this.plugin.getNextPagePath ? this.plugin.getNextPagePath() : null;\n\n    if (scrollPos < 50 && path && !this._isHandlingScroll) {\n      this.Provider.list(path).then(function (res) {\n        var _plugin$getPluginStat2 = _this12.plugin.getPluginState(),\n            files = _plugin$getPluginStat2.files,\n            folders = _plugin$getPluginStat2.folders;\n\n        _this12._updateFilesAndFolders(res, files, folders);\n      }).catch(this.handleError).then(function () {\n        _this12._isHandlingScroll = false;\n      }); // always called\n\n      this._isHandlingScroll = true;\n    }\n  };\n\n  View.prototype.donePicking = function donePicking() {\n    var dashboard = this.plugin.uppy.getPlugin('Dashboard');\n    if (dashboard) dashboard.hideAllPanels();\n  };\n\n  // displays loader view while asynchronous request is being made.\n\n\n  View.prototype._loaderWrapper = function _loaderWrapper(promise, then, catch_) {\n    var _this13 = this;\n\n    promise.then(then).catch(catch_).then(function () {\n      return _this13.plugin.setPluginState({ loading: false });\n    }); // always called.\n    this.plugin.setPluginState({ loading: true });\n  };\n\n  View.prototype.render = function render(state) {\n    var _plugin$getPluginStat3 = this.plugin.getPluginState(),\n        authenticated = _plugin$getPluginStat3.authenticated,\n        checkAuthInProgress = _plugin$getPluginStat3.checkAuthInProgress,\n        loading = _plugin$getPluginStat3.loading;\n\n    if (loading) {\n      return LoaderView();\n    }\n\n    if (!authenticated) {\n      return h(AuthView, {\n        pluginName: this.plugin.title,\n        demo: this.plugin.opts.demo,\n        checkAuth: this.checkAuth,\n        handleAuth: this.handleAuth,\n        handleDemoAuth: this.handleDemoAuth,\n        checkAuthInProgress: checkAuthInProgress\n      });\n    }\n\n    var browserProps = _extends({}, this.plugin.getPluginState(), {\n      getNextFolder: this.getNextFolder,\n      getFolder: this.getFolder,\n      addFile: this.addFile,\n      filterItems: this.filterItems,\n      filterQuery: this.filterQuery,\n      toggleSearch: this.toggleSearch,\n      sortByTitle: this.sortByTitle,\n      sortByDate: this.sortByDate,\n      logout: this.logout,\n      demo: this.plugin.opts.demo,\n      isActiveRow: this.isActiveRow,\n      isChecked: this.isChecked,\n      toggleCheckbox: this.toggleCheckbox,\n      getItemName: this.plugin.getItemName,\n      getItemIcon: this.plugin.getItemIcon,\n      handleScroll: this.handleScroll,\n      done: this.donePicking,\n      title: this.plugin.title,\n      viewType: this.opts.viewType\n    });\n\n    return Browser(browserProps);\n  };\n\n  return View;\n}();\n//# sourceMappingURL=index.js.map",null]}