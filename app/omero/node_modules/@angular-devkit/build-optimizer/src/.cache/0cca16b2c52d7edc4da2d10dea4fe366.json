{"remainingRequest":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/ts-smart-logger/LoggerFactory.js","dependencies":[{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/ts-smart-logger/LoggerFactory.js","mtime":1474380664000},{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/cache-loader/dist/cjs.js","mtime":1528352013145},{"path":"/Users/moises/source/code.research/sails-hook-redbox-omero/app/omero/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["\"use strict\";\nvar Logger_1 = require('./Logger');\nvar LoggerLevelEnum_1 = require('./LoggerLevelEnum');\nvar Utils_1 = require('./Utils');\nvar LOG_CONFIG_STORE_PARAMETER = \"__logConfig\", GLOBAL_LOGGER_FACTORY_PARAMETER = '$$LoggerFactory';\nexports.CONSOLE_DEBUG_FN = console.debug;\nexports.CONSOLE_INFO_FN = console.info;\nexports.CONSOLE_NOTICE_FN = console.log;\nexports.CONSOLE_WARN_FN = console.warn;\nexports.CONSOLE_ERROR_FN = console.error;\nvar LoggerFactory = /*@__PURE__*/ (function () {\n    function LoggerFactory() {\n    }\n    LoggerFactory.makeLogger = function (loggedClass) {\n        return new Logger_1.Logger(this.config).setLoggedClass(loggedClass);\n    };\n    /**\n     * Configure the factory of the loggers. It's main method necessarily need to call the runtime.\n     *\n     * @param outerConfig ILoggerConfig\n     */\n    LoggerFactory.configure = function (outerConfig) {\n        var storedLoggerConfig = this.tryGetFromStorage();\n        // Formation of configuration based on the priority:\n        //\n        // The first priority: the config from localStorage\n        // The second priority: the config from outer file\n        // The third priority: the local config at current class\n        this.config = Object.assign({ logLevel: LoggerLevelEnum_1.LoggerLevelEnum.DEBUG_LEVEL }, Utils_1.Utils.isFunction(outerConfig) ? new outerConfig() : outerConfig, storedLoggerConfig);\n        this.refreshEnvLoggersFunctions();\n    };\n    /**\n     * The level of logging. It can be called the runtime\n     *\n     * @param logLevel The level of logging\n     */\n    LoggerFactory.configureLogLevel = function (logLevel) {\n        this.config.logLevel = logLevel;\n        this.refreshEnvLoggersFunctions();\n    };\n    /**\n     * Saving the configuration in the local storage\n     *\n     * @param config Config\n     */\n    LoggerFactory.storeConfig = function (config) {\n        Utils_1.Utils.isPresent(localStorage) && localStorage.setItem(LOG_CONFIG_STORE_PARAMETER, JSON.stringify(config));\n    };\n    LoggerFactory.tryGetFromStorage = function () {\n        try {\n            return Utils_1.Utils.isPresent(localStorage) ? JSON.parse(localStorage.getItem(LOG_CONFIG_STORE_PARAMETER)) : null;\n        }\n        catch (e) {\n            return null;\n        }\n    };\n    LoggerFactory.refreshEnvLoggersFunctions = function () {\n        console.debug =\n            console.info =\n                console.log =\n                    console.warn =\n                        console.error = (function () { });\n        console.assert = console.assert || (function () { }); // It's for safe\n        if (this.config.logLevel >= LoggerLevelEnum_1.LoggerLevelEnum.ERROR_LEVEL) {\n            console.error = exports.CONSOLE_ERROR_FN;\n        }\n        if (this.config.logLevel >= LoggerLevelEnum_1.LoggerLevelEnum.WARN_LEVEL) {\n            console.warn = exports.CONSOLE_WARN_FN;\n        }\n        if (this.config.logLevel >= LoggerLevelEnum_1.LoggerLevelEnum.NOTICE_LEVEL) {\n            console.log = exports.CONSOLE_NOTICE_FN;\n        }\n        if (this.config.logLevel >= LoggerLevelEnum_1.LoggerLevelEnum.INFO_LEVEL) {\n            console.info = exports.CONSOLE_INFO_FN;\n        }\n        if (this.config.logLevel >= LoggerLevelEnum_1.LoggerLevelEnum.DEBUG_LEVEL) {\n            console.debug = exports.CONSOLE_DEBUG_FN || exports.CONSOLE_INFO_FN; // IE10 workaround\n        }\n    };\n    LoggerFactory.config = { logLevel: LoggerLevelEnum_1.LoggerLevelEnum.DEBUG_LEVEL };\n    return LoggerFactory;\n}());\nexports.LoggerFactory = LoggerFactory;\nif (typeof window !== 'undefined') {\n    window[GLOBAL_LOGGER_FACTORY_PARAMETER] = LoggerFactory;\n}\n",null]}